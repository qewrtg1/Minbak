<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.minbak.web.users.UsersMapper">

    <!-- 회원가입 -->
    <insert id="createUser" parameterType="com.minbak.web.users.UserDto" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO users (name, email, phone_number, password)
        VALUES (#{name}, #{email}, #{phoneNumber}, #{password})
    </insert>

    <!-- 역할 조회 -->
    <select id="findRoleByRoleId" resultType="String">
        SELECT role FROM roles WHERE role_id = #{roleId}
    </select>

    <!-- 특정 사용자 ID로 역할 조회 -->
    <select id="findRolesByUserId" resultType="com.minbak.web.users.RoleDto">
        SELECT r.*
        FROM roles r
        JOIN users_roles ur ON ur.role_id = r.role_id
        WHERE ur.user_id = #{userId}
    </select>

    <!-- 사용자 역할 삽입 -->
    <insert id="createUserRoleByUserIdAndRoleId">
        INSERT INTO users_roles (user_id, role_id)
        VALUES (#{userId}, #{roleId})
    </insert>

    <!-- 이메일로 사용자 조회 -->
    <select id="findUserEmailByEmail" resultType="String">
        SELECT email FROM users WHERE email = #{email}
    </select>

    <!-- 이메일로 사용자 전체 조회 -->
    <select id="findUserByEmail" resultType="com.minbak.web.users.UserDto">
        SELECT *
        FROM users WHERE email = #{email}
    </select>

    <!-- 아이디로 사용자 전체 조회 -->
    <select id="findUserByUserId" resultType="com.minbak.web.users.UserDto">
        SELECT *
        FROM users WHERE user_id = #{UserId}
    </select>

    <!-- limit와 offset값에 따라 게시글 조회 -->
    <select id="findUsersByLimitAndOffset" resultType="com.minbak.web.users.UserDto">
        select * from users
        order by user_id DESC
        limit #{limit} offset #{offset};
    </select>

    <!-- limit와 offset값, 그리고 문자열값에 따라 게시글 조회 -->
    <select id="findUsersByLimitAndOffsetAndString" resultType="com.minbak.web.users.UserDto">
        SELECT *
        FROM users
        WHERE name LIKE CONCAT('%', #{search}, '%') OR email LIKE CONCAT('%', #{search}, '%')
        ORDER BY user_id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 모든 유저 수 체크 -->
    <select id="countAllUsers" resultType="int">
        select count(*) from users;
    </select>

    <!--검색에 해당하는 유저 수 체크-->
    <select id="countUsersBySearch" resultType="int">
        SELECT COUNT(*)
        FROM users
        WHERE name LIKE CONCAT('%', #{search}, '%') OR email LIKE CONCAT('%', #{search}, '%')
    </select>

    <!--해당 role을 가진 유저 가져오기-->
    <select id="countUserRolesByRoleId" resultType="int">
        SELECT COUNT(*)
        FROM users_roles
        WHERE role_id = #{roleId}
    </select>

    <!--오늘 가입한 유저 수 가져오기-->
    <select id="countUsersJoinedToday" resultType="int">
        SELECT count(*)
        FROM users
        WHERE DATE(created_at) = CURRENT_DATE
    </select>

    <!--지난 7일간 요일별 가입자 수-->
    <select id="countUsersJoinedByWeekday" resultType="map">
        SELECT
        DAYOFWEEK(created_at) AS weekday,
        COUNT(*) AS count
        FROM
        users
        WHERE
        created_at >= CURDATE() - INTERVAL 7 DAY
        GROUP BY
        DAYOFWEEK(created_at)
        ORDER BY
        weekday
    </select>

    <!-- 사용자 정보 업데이트 -->
    <update id="updateUserByIdWithoutPassword" parameterType="com.minbak.web.users.UserDto">
        UPDATE users
        SET
        name = #{name},
        email = #{email},
        phone_number = #{phoneNumber},
        enabled = #{enabled}
        WHERE user_id = #{userId}

    </update>

    <!--해당 유저의 간략 결제 정보 가져오기-->
    <select id="findUsersPaymentsCompactInfoByLimitAndOffsetAndUserId" resultType="com.minbak.web.payments.PaymentDto">
        SELECT
        p.payment_id,
        p.amount,
        p.created_at,
        r.name AS room_name
        FROM
        payments p
        JOIN
        books b ON p.book_id = b.book_id
        JOIN
        rooms r ON b.room_id = r.room_id
        WHERE
        p.user_id = #{userId}
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!--해당 유저의 결제 개수-->
    <select id="countPaymentsByUserId">
        SELECT COUNT(*)
        FROM payments
        WHERE user_id = #{userId}
    </select>

    <!--유저아이디를 갖고 해당 유저의 룸 페지징데이터 가져오기-->
    <select id="findRoomsByLimitAndOffsetAndUserId" resultType="com.minbak.web.rooms.RoomsDto">
        SELECT *
        FROM rooms
        WHERE user_id = #{userId}
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!--해당 유저의 방 개수 가져오기-->
    <select id="countRoomsByUserId" resultType="int">
        SELECT COUNT(*)
        FROM rooms
        WHERE user_id = #{userId}
    </select>

    <!-- 사용자 삭제 -->
    <delete id="deleteUserByUserId" parameterType="int">
        DELETE FROM users
        WHERE user_id = #{userId}
    </delete>

    <!--유저 검색-->
    <select id="searchUsers" resultType="com.minbak.web.users.UserDto">
        SELECT * FROM users
        WHERE 1=1
        <if test="name != null and name != ''">
            AND name LIKE CONCAT('%', #{name}, '%')
        </if>
        <if test="email != null and email != ''">
            AND email LIKE CONCAT('%', #{email}, '%')
        </if>
        <if test="enabled != null">
            AND enabled = #{enabled}
        </if>
        <!-- startDate와 endDate 조건 처리 -->
        <if test="startDate != null">
            AND created_at >= #{startDate}
        </if>
        <if test="endDate != null">
            AND #{endDate} >= created_at
        </if>
        <!--예약 수를 books 테이블에서 userId를 이용해서 가져와서 검색-->
        <if test="bookCount != null">
            AND user_id IN (
            SELECT user_id FROM books
            GROUP BY user_id
            HAVING COUNT(book_id) >= #{bookCount}
            )
        </if>
        <!-- 페이징 처리: LIMIT과 OFFSET 추가 -->
        <if test="limit != null">
            LIMIT #{limit}
        </if>
        <if test="offset != null">
            OFFSET #{offset}
        </if>
    </select>

    <!--유저 카운트-->
    <select id="countSearchUsers" resultType="int">
        SELECT COUNT(*) FROM users
        <!--모든게 널일때 모든 데이터를 가져오기 위함-->
        WHERE 1=1
        <if test="name != null and name != ''">
            AND name LIKE CONCAT('%', #{name}, '%')
        </if>
        <if test="email != null and email != ''">
            AND email LIKE CONCAT('%', #{email}, '%')
        </if>
        <if test="enabled != null">
            AND enabled = #{enabled}
        </if>
        <!-- startDate와 endDate 조건 처리 -->
        <if test="startDate != null">
            AND created_at >= #{startDate}
        </if>
        <if test="endDate != null">
            AND #{endDate} >= created_at
        </if>
        <!-- 예약 수를 books 테이블에서 userId를 이용해서 가져와서 검색 -->
        <if test="bookCount != null">
            AND user_id IN (
            SELECT user_id FROM books
            GROUP BY user_id
            HAVING COUNT(book_id) >= #{bookCount}
            )
        </if>
    </select>

    <!-- 특정 user_id에 해당하는 books 수 가져오기 -->
    <select id="findBookCountByUserId" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM books
        WHERE user_id = #{userId}
    </select>

    <!-- 유저 검색과 그들의 예약 수를 함께 가져오는 쿼리 -->
    <select id="searchUsersWithBookCount" resultType="com.minbak.web.users.UserResponseDto">
        SELECT u.user_id, u.name, u.email, u.phone_number, u.enabled, u.created_at, u.updated_at,
        (SELECT COUNT(*) FROM books b WHERE b.user_id = u.user_id) AS bookCount
        FROM users u
        WHERE 1=1
        <if test="name != null and name != ''">
            AND u.name LIKE CONCAT('%', #{name}, '%')
        </if>
        <if test="email != null and email != ''">
            AND u.email LIKE CONCAT('%', #{email}, '%')
        </if>
        <if test="enabled != null">
            AND u.enabled = #{enabled}
        </if>
        <!-- startDate와 endDate 조건 처리 -->
        <if test="startDate != null">
            AND u.created_at >= #{startDate}
        </if>
        <if test="endDate != null">
            AND #{endDate} >= u.created_at
        </if>
        <!-- 예약 수를 기준으로 필터링 -->
        <if test="bookCount != null">
            AND u.user_id IN (
            SELECT user_id FROM books
            GROUP BY user_id
            HAVING COUNT(book_id) >= #{bookCount}
            )
        </if>
        <!-- 페이징 처리: LIMIT과 OFFSET 추가 -->
        <if test="limit != null">
            LIMIT #{limit}
        </if>
        <if test="offset != null">
            OFFSET #{offset}
        </if>
    </select>

    <!-- 호스트 검색과 그들이 관리하는 숙소 개수를 함께 가져오는 쿼리 -->
    <select id="searchHostsWithRoomCount" resultType="com.minbak.web.users.HostResponseDto">
        SELECT
        u.user_id,
        u.name,
        u.email,
        u.phone_number,
        u.enabled AS user_enabled,  -- 유저의 활성화 상태
        h.host_id,
        h.hobby,
        h.introduction,
        h.is_verified,
        h.account_number,
        h.created_at,  -- 호스트의 가입일
        h.updated_at,  -- 호스트의 수정일
        (SELECT COUNT(*) FROM rooms r WHERE r.user_id = u.user_id) AS roomCount  -- 유저가 관리하는 숙소 수
        FROM users u
        INNER JOIN host h ON u.user_id = h.user_id  -- users와 host를 조인 (INNER JOIN으로 변경)
        WHERE 1=1
        <if test="name != null and name != ''">
            AND u.name LIKE CONCAT('%', #{name}, '%')
        </if>
        <if test="email != null and email != ''">
            AND u.email LIKE CONCAT('%', #{email}, '%')
        </if>
        <if test="enabled != null">
            AND u.enabled = #{enabled}
        </if>
        <!-- startDate와 endDate 조건 처리 -->
        <if test="startDate != null">
            AND u.created_at >= #{startDate}
        </if>
        <if test="endDate != null">
            AND #{endDate} >= u.created_at
        </if>
        <!-- 숙소 개수를 기준으로 필터링 -->
        <if test="roomCount != null">
            AND u.user_id IN (
            SELECT user_id FROM rooms
            GROUP BY user_id
            HAVING COUNT(room_id) >= #{roomCount}
            )
        </if>
        <!-- 페이징 처리: LIMIT과 OFFSET 추가 -->
        <if test="limit != null">
            LIMIT #{limit}
        </if>
        <if test="offset != null">
            OFFSET #{offset}
        </if>
    </select>


    <!-- 검색한 호스트 유저 수 -->
    <select id="countHostsWithRoomCount" resultType="java.lang.Integer">
        SELECT count(*)
        FROM host h
        LEFT JOIN users u ON h.user_id = u.user_id
        WHERE 1=1
        <if test="name != null and name != ''">
            AND u.name LIKE CONCAT('%', #{name}, '%')
        </if>
        <if test="email != null and email != ''">
            AND u.email LIKE CONCAT('%', #{email}, '%')
        </if>
        <if test="enabled != null">
            AND u.enabled = #{enabled}
        </if>
        <!-- startDate와 endDate 조건 처리 -->
        <if test="startDate != null">
            AND u.created_at >= #{startDate}
        </if>
        <if test="endDate != null">
            AND #{endDate} >= u.created_at
        </if>
        <!-- 숙소 개수를 기준으로 필터링 -->
        <if test="roomCount != null">
            AND h.user_id IN (
            SELECT user_id
            FROM rooms
            GROUP BY user_id
            HAVING COUNT(room_id) >= #{roomCount}
            )
        </if>
    </select>

    <!-- 아이디로 호스트 정보 조회 -->
    <select id="findHostByUserId" resultType="com.minbak.web.users.HostResponseDto">
        SELECT *
        FROM host WHERE user_id = #{UserId}
    </select>

<!--어드민 추가-->
    <insert id="makeAdmin">
        INSERT INTO users_roles (user_id, role_id)
        VALUES (#{user_id}, 3)  <!-- user_id 값은 동적으로 받아오며, role_id는 3으로 고정 -->
    </insert>
</mapper>