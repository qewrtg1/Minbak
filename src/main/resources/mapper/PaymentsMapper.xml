<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.minbak.web.payments.PaymentsMapper">

    <!-- 결제 정보 조회 -->
    <select id="findPaymentById" resultType="com.minbak.web.payments.PaymentDto">
        SELECT *
        FROM payments
        WHERE payment_id = #{paymentId}
    </select>

    <!-- 결제 정보 목록 조회 -->
    <select id="findAllPayments" resultType="com.minbak.web.payments.PaymentDto">
        SELECT *
        FROM payments
        ORDER BY created_at DESC
    </select>

    <!-- 결제 정보 추가 -->
    <insert id="createPayment" useGeneratedKeys="true" keyProperty="paymentId">
        INSERT INTO payments (user_id, book_id, amount, status, method, transaction_id, paid_at)
        VALUES (#{userId}, #{bookId}, #{amount}, #{status}, #{method}, #{transactionId}, #{paidAt})
    </insert>

    <!-- 결제 정보 수정 -->
    <update id="updatePayment">
        UPDATE payments
        SET amount = #{amount}, status = #{status}, method = #{method}, transaction_id = #{transactionId}, paid_at = #{paidAt}
        WHERE payment_id = #{paymentId}
    </update>

    <!-- 결제 정보 삭제 -->
    <delete id="deletePayment">
        DELETE FROM payments
        WHERE payment_id = #{paymentId}
    </delete>

    <!-- 특정 사용자에 의한 결제 정보 조회 -->
    <select id="findPaymentsByUserId" resultType="com.minbak.web.payments.PaymentDto">
        SELECT *
        FROM payments
        WHERE user_id = #{userId}
        ORDER BY created_at DESC
    </select>

    <!-- 특정 예약에 대한 결제 정보 조회 -->
    <select id="findPaymentsByBookId" resultType="com.minbak.web.payments.PaymentDto">
    SELECT *
    FROM payments
    WHERE book_id = #{bookId}
    </select>

    <!-- 결제 정보 페이징 조회 -->
    <select id="findPaymentsWithLimitAndOffset" resultType="com.minbak.web.payments.PaymentDto">
        SELECT *
        FROM payments
        ORDER BY payment_id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 결제 정보 총 개수 조회 -->
    <select id="countPayments" resultType="int">
        SELECT COUNT(*)
        FROM payments
    </select>

    <!-- 예약 상태 업데이트 -->
    <update id="updateBookStatus">
        UPDATE books
        SET status = #{status}
        WHERE book_id = #{bookId}
    </update>


    <!-- 주문번호(`merchantUid`)를 DB에 저장 -->
    <insert id="insertPaymentOrder" parameterType="com.minbak.web.payments.PaymentDto">
        INSERT INTO payments (merchant_uid, book_id, user_id, amount, method, status, created_at)
        VALUES (#{merchantUid}, #{bookId}, #{userId}, #{amount}, #{method}, #{status}, NOW());
    </insert>

    <!-- 주문번호(`merchantUid`)로 주문 정보 조회 -->
    <select id="getPaymentByMerchantUid" parameterType="String" resultType="com.minbak.web.payments.PaymentDto">
        SELECT payment_id, merchant_uid, book_id, user_id, amount, method, status, transaction_id, created_at, paid_at
        FROM payments
        WHERE merchant_uid = #{merchantUid}
    </select>

    <!-- 결제 상태 업데이트 (결제 완료 시) -->
    <update id="updatePaymentStatus" parameterType="com.minbak.web.payments.PaymentDto">
        UPDATE payments
        SET status = '결제 완료', transaction_id = #{transactionId}, paid_at = NOW()
        WHERE merchant_uid = #{merchantUid}
    </update>

    <!--결제정보 필터링 조회    -->
    <select id="filterPaymentsByPaymentDto" parameterType="com.minbak.web.payments.RequestPaymentDto" resultType="com.minbak.web.payments.PaymentDto">
        SELECT p.*
        FROM payments p
        LEFT JOIN books b ON p.book_id = b.book_id  <!-- rooms 테이블과 JOIN -->
        LEFT JOIN rooms r ON b.room_id = r.room_id
        LEFT JOIN users u ON p.user_id = u.user_id  <!-- users 테이블과 JOIN -->
        <where>
            <if test="paymentId != null">
                AND p.payment_id = #{paymentId}
            </if>
            <if test="userId != null">
                AND p.user_id = #{userId}
            </if>
            <if test="bookId != null">
                AND p.book_id = #{bookId}
            </if>

            <!-- 금액 범위 조건 추가 -->
            <if test="minAmount != null">
                AND p.amount &gt; #{minAmount}
            </if>
            <if test="maxAmount != null">
                AND p.amount &lt; #{maxAmount}
            </if>

            <if test="status != null and status != ''">
                AND p.status = #{status}
            </if>
            <if test="method != null and method != ''">
                AND p.method = #{method}
            </if>
            <if test="transactionId != null and transactionId != ''">
                AND p.transaction_id = #{transactionId}
            </if>
            <if test="paidAt != null">
                AND p.paid_at = #{paidAt}
            </if>
            <if test="createdAt != null">
                AND p.created_at = #{createdAt}
            </if>

            <!-- roomName 조건 추가 (rooms 테이블에서 가져옴) -->
            <if test="roomName != null and roomName != ''">
                AND r.name LIKE CONCAT('%', #{roomName}, '%')
            </if>

            <!-- userEmail 조건 추가 (users 테이블에서 가져옴) -->
            <if test="userEmail != null and userEmail != ''">
                AND u.user_email = #{userEmail}
            </if>

            <if test="merchantUid != null and merchantUid != ''">
                AND p.merchant_uid = #{merchantUid}
            </if>
        </where>
        ORDER BY p.payment_id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 필터 결제 정보 개수 조회 -->
    <select id="countFilterPayments" resultType="int" parameterType="com.minbak.web.payments.RequestPaymentDto">
            SELECT count(*)  FROM payments p
        LEFT JOIN books b ON p.book_id = b.book_id  <!-- rooms 테이블과 JOIN -->
        LEFT JOIN rooms r ON b.room_id = r.room_id
        LEFT JOIN users u ON p.user_id = u.user_id  <!-- users 테이블과 JOIN -->
        <where>
            <if test="paymentId != null">
                AND p.payment_id = #{paymentId}
            </if>
            <if test="userId != null">
                AND p.user_id = #{userId}
            </if>
            <if test="bookId != null">
                AND p.book_id = #{bookId}
            </if>

            <!-- 금액 범위 조건 추가 -->
            <if test="minAmount != null">
                AND p.amount &gt; #{minAmount}
            </if>
            <if test="maxAmount != null">
                AND p.amount &lt; #{maxAmount}
            </if>

            <if test="status != null and status != ''">
                AND p.status = #{status}
            </if>
            <if test="method != null and method != ''">
                AND p.method = #{method}
            </if>
            <if test="transactionId != null and transactionId != ''">
                AND p.transaction_id = #{transactionId}
            </if>
            <if test="paidAt != null">
                AND p.paid_at = #{paidAt}
            </if>
            <if test="createdAt != null">
                AND p.created_at = #{createdAt}
            </if>

            <!-- roomName 조건 추가 (rooms 테이블에서 가져옴) -->
            <if test="roomName != null and roomName != ''">
                AND r.name = #{roomName}
            </if>

            <!-- userEmail 조건 추가 (users 테이블에서 가져옴) -->
            <if test="userEmail != null and userEmail != ''">
                AND u.user_email = #{userEmail}
            </if>

            <if test="merchantUid != null and merchantUid != ''">
                AND p.merchant_uid = #{merchantUid}
            </if>
        </where>
    </select>

</mapper>