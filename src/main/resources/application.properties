spring.application.name=minbak
spring.datasource.url=jdbc:mysql://db-minbak-db.cr4so20imjnv.ap-northeast-2.rds.amazonaws.com:3306/minbak_db
spring.datasource.username=admin
spring.datasource.password=${ADMIN_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.configuration.map-underscore-to-camel-case=true
spring.thymeleaf.cache=false

#캐싱
spring.cache.type=caffeine
spring.cache.cache-names=mainPageData,dashboard
spring.cache.caffeine.spec=maximumSize=100,expireAfterWrite=5m

#ì¸ììê° 90ë¶ì¼ë¡ ì¤ì 
server.servlet.session.timeout=90m

#íìë¦¬íìì ì¸ì¦ë ì¬ì©ì ì ë³´ ì ê·¼
#spring.thymeleaf.extras.springsecurity5.enabled=true

# JWT (JwtUtil)
#The secret key must be long enough!!!!!!!!!
jwt.secret-key=${JWT_SECRET_KEY}
jwt.access-token-expiration-time=${JWT_ACCESS_TOKEN_EXPIRATION_TIME}
jwt.refresh-token-expiration-time=${JWT_REFRESH_TOKEN_EXPIRATION_TIME}

# 첨부파일 관리
file.upload.directory=/home/ubuntu/img/uploads
#file.upload.directory=C:/img/uploads

# 단일 파일 최대 업로드 크기 (예: 10MB)
spring.servlet.multipart.max-file-size=10MB

# 전체 요청의 최대 크기 (예: 50MB)
spring.servlet.multipart.max-request-size=50MB

#port-one
portone.imp.key=${PORTONE_API_KEY}
portone.api.secret=${PORTONE_API_SECRET}


# paypal
paypal.client.id=${PAYPAL_CLIENT_ID}
paypal.client.secret=${PAYPAL_CLIENT_SECRET}
# paypal mode sandbox or live
paypal.mode=sandbox
# server url
server.url=http://localhost:8080

# Email
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${YOUR_GMAIL_ADDRESS}
spring.mail.password=${YOUR_GMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.starttls.enable=true

#naver-registration
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email,mobile
#
##provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

#google-registration
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email

twilio.account_sid=${YOUR_ACCOUNT_SID}
twilio.auth_token=${YOUR_AUTH_TOKEN}
twilio.from_phone_number=${YOUR_FROM_PHONE_NUMBER}